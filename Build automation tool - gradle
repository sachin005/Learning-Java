What is a build automation tool?
http://stackoverflow.com/questions/610732/what-is-build-automation-software-for-example-ant
http://www.drdobbs.com/jvm/why-build-your-java-projects-with-gradle/240168608

I thought that you're supposed to test your app, and when it is running you click the 'build' button in eclipse or through command-line
java, and it makes a .jar file out of it? So why do you need to 'automate' this process?

***
1.
Not all the Java development is done through eclipse and not all the jars may be built from the command line ( or should be built from
the command line ) .

You may need additionally run test cases, unit tests, and many, many other process.

What ant does, is provide a mechanism to automate all this work ( so you don't have to do it every time ) and perhaps you may invoke
this ant script each day at 6 p.m.

For instance, in some projects, a daily build is needed, the following are the task that may be automated with ant, so they can run
without human intervention.

Connect to subversion server.
Download/update with the latest version
Compile the application
Run the test cases
Pack the application ( in jar, war, ear, or whatever )
Commit this build binaries to subversion.
Install the application in a remote server
Restart the server
Send an email with the summary of the job.
Of course for other projects this is overkill, but for some others is very helpful.

2.
If you're working on an open source project, however, or professional software which needs to be able to build on a build server etc,
requiring a particular IDE to be running isn't a good idea.

3.
Ant is used to automate a build process, but a build process is often much more than compiling. Ant has "tasks" that can be used to
perform miscellaneous useful functions. You can create your own task to do just about anything by writing a java class and telling ant
where to find it. You can then mix and match these tasks to create targets that will execute a set of tasks.

You can also set up a dynamic environment in which to build your application. You can set up property files to hold variables that can
be used in the build process, i.e. to hold file paths, class paths, etc. This is useful for instance to differentiate between test and
production builds where deployment paths, database instances, etc. might change. Ant also includes flow control (if, etc.)

Some things I've seen ant do:

Compile code
Use version control to checkout the latest version or to tag the version being built
Run sql scripts to build or rebuild a test database
Copy files from an external resource for inclusion in a project
Bundle code into a jar, war or ear file
Deploy a web application to an application server
Restart an application server
Execute a test suite
Static analysis, i.e. CheckStyle or PMD
Send email to a team to alert them to a build.
Generate files based on information from the build.
Example: I have a jsp in my app that does nothing but display version/build information. It is generated by ant when I run a build,
and the production operations team checks this page when they deploy the application to make sure they've deployed the correct build.

*
In many larger companies (and likely some smaller ones), you'll find that production code is not built by the people who developed it.
Instead, the developers may check their code into a source code repository and tag it. Then they give this tag to a build team.

The build team, in a separate (clean) area - possibly on some headless server (i.e. with no GUI) - will then check out the code and
run a build script. The build script will be completely independent of the desktop environment/IDE.

This ensures that nothing which happens to be on any one developer's computer is "polluting" the build. (Or, more likely, nothing
outside source control is required for the system to work!)

So most software you use will never, ever be built from a developer's desktop.

PS. You might also want to look at the idea of Continuous Integration
